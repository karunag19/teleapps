AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  scheduler

  Sample SAM Template for scheduler
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        REGION: "ap-southeast-2"  
        GENESYS_ENV: "mypurecloud.com.au" 
        SECRET_CLIENT: demo-Secret
        SECRET_TOKEN: demo-AccessToken
        USER_POOL_ID: ap-southeast-2_fH8Dbx7A0     
        TBL_ASSIGNMENT: demo_gc_assignment
        TBL_ASSIGNMENT_SKILL: demo_gc_assignment_skill
        TBL_SCHEDULED: demo_gc_scheduled
        TBL_API_KEY: demo_api_key

Resources:
  UsersFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: Users
      Description: Create, Delete, List & Reset admin users
      Role: arn:aws:iam::070618480609:role/TeleApps-Schedule
      CodeUri: cognito/
      Handler: main.lambda_handler
      Layers:
        - !Ref AppDepLayer       
      Runtime: python3.8
      Events:
        GetUsersAPI:
          Type: Api 
          Properties:
            Path: /cognito/{proxy+}
            Method: 'ANY'

  GenesysFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: Genesys
      Description: All Genesys related functions like get agents, skill, schedule, task etc..
      Role: arn:aws:iam::070618480609:role/TeleApps-Schedule
      CodeUri: genesys/
      Handler: g_main.lambda_handler
      Layers:
        - !Ref AppDepLayer      
      Runtime: python3.8
      Events:
        GetUsersAPI:
          Type: Api 
          Properties:
            Path: /genesys/{proxy+}
            Method: 'ANY'            

  GenesysQueueFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: GenesysQueue
      Description: All GenesysQueue related functions like contacts in queue etc..
      Role: arn:aws:iam::070618480609:role/TeleApps-Schedule
      CodeUri: genesys/
      Handler: g_queue.lambda_handler
      Layers:
        - !Ref AppDepLayer      
      Runtime: python3.8
      Events:
        GetUsersAPI:
          Type: Api 
          Properties:
            Path: /queue/{proxy+}
            Method: 'ANY'  

  APIAuthorizerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: APIAuthorizer
      Description: Generate application KEY for API authentication.
      CodeUri: auth/
      Handler: api_main.lambda_handler
      Layers:
        - !Ref AppDepLayer      
      Runtime: python3.8
      Events:
        GetUsersAPI:
          Type: Api 
          Properties:
            Path: /api/{proxy+}
            Method: 'ANY' 

  KeyAuthorizerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: KeyAuthorizer
      Description: APIAuthorizer, this function will validate the Authorization token(KEY) pass in the header.
      CodeUri: auth/
      Handler: auth_main.lambda_handler
      Runtime: python3.8
 
  AppDepLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: sam-app-dependencies
          Description: Dependencies for sam app [requets]
          ContentUri: dependencies/
          CompatibleRuntimes:
            - python3.8
          LicenseInfo: 'MIT'
          RetentionPolicy: Retain

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn

    # ApiGatewayApi:
    # Type: AWS::Serverless::Api
    # Properties:
    #   StageName: prod
    #   MethodSettings:
    #     - ThrottlingBurstLimit: 20
    #       ThrottlingRateLimit: 20
    #       HttpMethod: "*"
    #       ResourcePath: "/*"
    #       LoggingLevel: INFO
    #       MetricsEnabled: true
    #   Auth:  (Karua: - This is not working, i have to check)
    #     DefaultAuthorizer: MyCognitoAuthorizer
    #     Authorizers:
    #       MyCognitoAuthorizer:
    #         UserPoolArn: !GetAtt CognitoPool.Arn

  # HelloWorldFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: hello_world/
  #     Handler: app.lambda_handler
  #     Runtime: python3.8
  #     Architectures:
  #       - x86_64
  #     Events:
  #       HelloWorld:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           Path: /hello
  #           Method: get
  #           # Auth:
  #           #   Authorizers:
  #           #     MyCognitoAuth:
  #           #       AuthorizationScopes:
  #           #         - scope1
  #           #         - scope2
  #           #       UserPoolArn:
  #           #         Fn::GetAtt:
  #           #           - MyCognitoUserPool
  #           #           - Arn
  #           #       Identity:
  #           #         Header: MyAuthorizationHeader
  #           #         ValidationExpression: myauthvalidationexpression