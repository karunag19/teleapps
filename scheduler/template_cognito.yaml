AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  scheduler

  Sample SAM Template for scheduler
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Parameters:
  CustomerName:
    Type: String
    Description: Name of the customer
  ClientDomains:
    Type: CommaDelimitedList
    Description: Array of domains allowed to use this UserPool
  AppDomainName:
    Type: String
    Description: Application domain url.
  AdminEmail:
    Type: String
    Description: Email address for administrator
  Region:
    Type: String
    Description: Name of the Region
  GCEnv:
    Type: String
    Description: Name of Genesys Cloud Environment
  # GCClientID:
  #   Type: String
  #   Description: Genesys Cloud client id
  # GCSecret:
  #   Type: String
  #   Description: Genesys Cloud secret key

Globals:
  Function:
    Timeout: 180
    Environment:
      Variables:
        REGION: !Ref Region  
        SECRET_CLIENT: !Sub ${CustomerName}-Secret  
        # DEBUG - 10, INFO - 20, ERROR - 40
        # LOGLEVEL: 20

Resources:
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${CustomerName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
    
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Sub ${CustomerName}-UserPoolClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${CustomerName}-${AWS::AccountId}
      UserPoolId: !Ref MyCognitoUserPool

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      Description: Admin User Group
      Precedence: 0
      UserPoolId: !Ref MyCognitoUserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref AdminEmail
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmail
      UserPoolId: !Ref MyCognitoUserPool

  AddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref AdminUserGroup
      Username: !Ref AdminUser
      UserPoolId: !Ref MyCognitoUserPool

  SecretManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:  !Sub ${CustomerName}-Secret
      Description: "Store application key & Genesys key details"
      SecretString: '{"GENESYS_CLIENT_ID":"", "GENESYS_SECRET":""}'

  SecretManagerKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:  !Sub ${CustomerName}-AccessToken
      Description: "Store application key & Genesys key details"
      SecretString: '{"access_token":"","token_type":"", "expires_in":"", "expires_time":""}'

  DynamoDBTableAssignment:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${CustomerName}_gc_assignment  
      AttributeDefinitions: 
        - AttributeName: assignment_name
          AttributeType: S
        - AttributeName: agent_name
          AttributeType: S          
      KeySchema: 
        - AttributeName: assignment_name
          KeyType: HASH
        - AttributeName: agent_name
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5

  DynamoDBTableAssignmentSkill:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${CustomerName}_gc_assignment_skill  
      AttributeDefinitions: 
        - AttributeName: assignment_name
          AttributeType: S
        - AttributeName: agent_name
          AttributeType: S          
      KeySchema: 
        - AttributeName: assignment_name
          KeyType: HASH
        - AttributeName: agent_name
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5

  DynamoDBTableAssignmentScheduled: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${CustomerName}_gc_scheduled 
      AttributeDefinitions: 
        - AttributeName: p_key
          AttributeType: S
        - AttributeName: scheduled_name
          AttributeType: S          
      KeySchema: 
        - AttributeName: p_key
          KeyType: HASH
        - AttributeName: scheduled_name
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5

  DynamoDBTableAPIToken: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${CustomerName}_api_key
      AttributeDefinitions: 
        - AttributeName: p_key
          AttributeType: S
        - AttributeName: token
          AttributeType: S          
      KeySchema: 
        - AttributeName: p_key
          KeyType: HASH
        - AttributeName: token 
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5

  DynamoDBTableQueuedContacts: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${CustomerName}_q_contacts
      AttributeDefinitions: 
        - AttributeName: p_key
          AttributeType: S
        - AttributeName: queue_id
          AttributeType: S          
      KeySchema: 
        - AttributeName: p_key
          KeyType: HASH
        - AttributeName: queue_id 
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5

  DynamoDBTableQueuedContactDetails: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${CustomerName}_q_contact_details
      AttributeDefinitions: 
        - AttributeName: queue_id
          AttributeType: S
        - AttributeName: contact_id
          AttributeType: S          
      KeySchema: 
        - AttributeName: queue_id
          KeyType: HASH
        - AttributeName: contact_id 
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5

  ServiceApi:
    DependsOn: MyCognitoUserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${CustomerName}-ServiceApi
      StageName: Testing
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "MyCognitoUserPool.Arn"

  UsersFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub ${CustomerName}_Users
      Description: Create, Delete, List & Reset admin users
      # Role: !Ref Role
      Policies:
        - Statement:
          - Sid: GetSecretKey
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
            Resource: '*'
          - Sid: CognitoUsers
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminDeleteUser
              - cognito-idp:AdminGetUser
            Resource: '*'
      CodeUri: cognito/
      Handler: main.lambda_handler
      Layers:
        - !Ref AppDepLayer       
      Runtime: python3.8
      Environment:
        Variables:
          USER_POOL_ID: !Ref MyCognitoUserPool
      Events:
        GetUsersAPI:
          Type: Api 
          Properties:
            Path: /cognito/{proxy+}
            Method: 'ANY'
            RestApiId: !Ref ServiceApi
            Auth:
              Authorizer: CognitoAuthorizer

  GenesysFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub ${CustomerName}_Genesys
      Description: All Genesys related functions like get agents, skill, schedule, task etc..
      # Role: !Ref Role
      Policies:
        - Statement:
          - Sid: GetSecretKey
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
            Resource: '*'
        - Statement:
          - Sid: DynamaDB
            Effect: Allow
            Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:GetRecords
            Resource: '*'
      CodeUri: genesys/
      Handler: g_main.lambda_handler
      Layers:
        - !Ref AppDepLayer      
      Runtime: python3.8
      Environment:
        Variables:
          GENESYS_ENV: !Ref GCEnv
          SECRET_TOKEN: !Sub ${CustomerName}-AccessToken   
          TBL_ASSIGNMENT: !Sub ${CustomerName}_gc_assignment
          TBL_ASSIGNMENT_SKILL: !Sub ${CustomerName}_gc_assignment_skill
          TBL_SCHEDULED: !Sub ${CustomerName}_gc_scheduled
      Events:
        GetUsersAPI:
          Type: Api 
          Properties:
            Path: /genesys/{proxy+}
            Method: 'ANY' 
            RestApiId: !Ref ServiceApi
            Auth:
              Authorizer: CognitoAuthorizer           
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)

  APIAuthorizerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub ${CustomerName}_APIAuthorizer
      Description: Generate application KEY for API authentication.
      CodeUri: auth/
      Handler: api_main.lambda_handler
      Layers:
        - !Ref AppDepLayer      
      Runtime: python3.8
      Environment:
        Variables:
          TBL_API_KEY: !Sub ${CustomerName}__api_key
      Events:
        GetUsersAPI:
          Type: Api 
          Properties:
            Path: /api/{proxy+}
            Method: 'ANY' 

  GenesysQueueFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub ${CustomerName}_GenesysQueue
      Description: All Genesys Queue related functions like contacts in queue etc..
      CodeUri: genesys/
      Handler: g_queue.lambda_handler
      Layers:
        - !Ref AppDepLayer      
      Runtime: python3.8
      MemorySize: 2048
      Environment:
        Variables:
          GENESYS_ENV: !Ref GCEnv
          SECRET_TOKEN: !Sub ${CustomerName}-AccessToken   
          TBL_Q_Contacts: !Sub ${CustomerName}_q_contacts
          TBL_Contact_Details: !Sub ${CustomerName}_q_contact_details   
      Policies:
        - Statement:
          - Sid: GetSecretKey
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              # - secretsmanager:PutSecretValue
            Resource: '*'
        - Statement:
          - Sid: DynamaDB
            Effect: Allow
            Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:GetRecords
            Resource: '*'
      Events:
        GetUsersAPI:
          Type: Api 
          Properties:
            Path: /queue/{proxy+}
            Method: 'ANY' 
            RestApiId: !Ref ServiceApi
            # Auth:
            #   Authorizer: CognitoAuthorizer 
            Auth:
              DefaultAuthorizer: CustomAuthorizer
              Authorizers:   
                CustomAuthorizer:
                  FunctionPayloadType: TOKEN
                  FunctionArn: !GetAtt "KeyAuthorizerFunction.Arn"
                  Identity:
                    Header: Authorization
                    ReauthorizeEvery: 300
              
  KeyAuthorizerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub ${CustomerName}_KeyAuthorizer
      Description: APIAuthorizer, this function will validate the Authorization token(KEY) pass in the header.
      CodeUri: auth/
      Handler: auth_main.lambda_handler
      Runtime: python3.8
      Policies:
        - Statement:
          - Sid: DynamaDB
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: '*'
      Environment:
        Variables:
          TBL_API_KEY: !Sub ${CustomerName}_api_key
          REGION: ap-southeast-2
          ACC_NUMBER: 070618480609
          API_DEPLOY_URL: stel4fk8w7

  AppDepLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: sam-app-dependencies
          Description: Dependencies for sam app [requets]
          ContentUri: dependencies/
          CompatibleRuntimes:
            - python3.8
          LicenseInfo: 'MIT'
          RetentionPolicy: Retain



  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Change bucket name to reflect your website
      BucketName: !Ref AppDomainName

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
      # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  # # -------------------

  # CloudfrontDistribution_Email:
  #   Type: "AWS::CloudFront::Distribution"
  #   Properties:
  #     DistributionConfig:
  #       Comment: "Cloudfront distribution for serverless website"
  #       DefaultRootObject: "index.html"
  #       Enabled: true
  #       HttpVersion: http2
  #       # List of origins that Cloudfront will connect to
  #       Origins:
  #         - Id: s3-website
  #           DomainName: !GetAtt S3Bucket_Email.DomainName
  #           S3OriginConfig:
  #             # Restricting Bucket access through an origin access identity
  #             OriginAccessIdentity: 
  #               Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
  #       # To connect the CDN to the origins you need to specify behaviours
  #       DefaultCacheBehavior:
  #         # Compress resources automatically ( gzip )
  #         Compress: 'true'
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #           - OPTIONS
  #         ForwardedValues:
  #           QueryString: false
  #         TargetOriginId: s3-website
  #         ViewerProtocolPolicy : redirect-to-https

  # S3Bucket_Email:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     # Change bucket name to reflect your website
  #     BucketName: !Ref AppDomainName

  # S3BucketPolicy_Email:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref S3Bucket_Email
  #     PolicyDocument:
  #     # Restricting access to cloudfront only.
  #       Statement:
  #         -
  #           Effect: Allow
  #           Action: 's3:GetObject'
  #           Resource:
  #             - !Sub "arn:aws:s3:::${S3Bucket_Email}/*"
  #           Principal:
  #             AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

Outputs:
  UserPoolId:
    Description: "User Pool ID"
    Value: !Ref MyCognitoUserPool
    Export:
      Name: !Sub ${CustomerName}:UserPoolId

  UserPoolClientId:
    Description: "Application client ID"
    Value: !Ref MyCognitoUserPoolClient

  AuthenticationURL:
    Description: "URL used for Authentication"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com

  DynamoDB:
    Description: "DynamoDB ARN"
    Value: !Ref DynamoDBTableAssignment
     